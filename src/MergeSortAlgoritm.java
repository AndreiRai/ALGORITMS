public class MergeSortAlgoritm {
    public static void mergeSort(int[] src, int n) {
        if (n < 2) return;

        int mid = n / 2;
        int[] left = new int[mid];
        int[] right = new int[n - mid];

        System.arraycopy(src, 0, left, 0, mid);
        System.arraycopy(src, mid, right, 0, n - mid);
        //В аргументах метода n обозначает размер массива, а src - исходный массив (который нужно сортировать).
        // Для всех массивов размером менее 2 мы возвращаем функцию.
        //Затем делим массив по центру и записываем числа в массивы, которые предназначены для левого и правого столбца
    }
  //Теперь нам нужно же вызвать еще методы, которые будут делить массивы left и right пополам,
    // а потом эти поделенные массивы еще раз поделились
    // Изначально у нас будет делиться первый массив до тех пор, пока не дойдет до базового случая.
    // Аналогично добавим деление для правой ветки:

    //Так-с, мы научились делить массивы, но их же еще собрать в один нужно, поэтому создадим еще один метод:

    public static void merge(int[] src, int[] left, int[] right, int leftLength, int rightLength) {
        int k = 0, i = 0, j = 0;

        while (i < leftLength && j < rightLength) {          //Именно тут происходит сортировка. Как же работает этот алгоритм?
                                                             //Допустим на данном этапе сортировки мы имеем массивы {6,10} {5,8};
            if (left[i] <= right[j]) src[k++] = left[i++];  //Первым делом сравнивается 1 число в первом массиве и 1 во втором: если в первом меньше,
                                                           // то мы вставляем этот элемент в массив src и повышаем i на 1,
                                                           // чтобы сравнивать дальше 2 число в первом массиве с 1 числом во втором
            else src[k++] = right[j++];
        }

        while (i < leftLength) {
            src[k++] = left[i++];
        }

        while (j < rightLength) {
            src[k++] = right[j++];
            // Разберемся поподробнее с этим методом:
            //Он принимает в аргументах:
            //src - ссылка на массив, который мы будем изменять, чтобы он был отсортирован.
            //left - ссылка на массив левой ветки;
            //right - ссылка на массив правой ветки;
            //leftLength - длина массив левой ветки;
            //rightLength - длина массив правой ветки;

        }
        //в параметрах методов можно избавиться от величин длины массивов, это лишнее.
        // а там где они используются внутри метода просто вызывать arr.length,
        // где arr - это название массива. и ты избавишься от передачи в метод лишних параметров. например:

        //public static void mergeSort(int[] src) {
        //        int mid = src.length / 2;
        //}
        //public static void merge(int[] src, int[] left, int[] right) {
        //        while (i < left.length && j < right.length)
        //}
    }
}
//Algoritms/2